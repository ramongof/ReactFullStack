{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","key","id","className","content","onClick","axios","get","then","response","data","newObject","post","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","console","log","target","placeholder","type","ReactDOM","render","document","getElementById"],"mappings":"8OAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAChBC,EAAQF,EAAKG,UACb,qBAAuB,iBACzB,OACI,wBAAIC,IAAKJ,EAAKK,GAAIC,UAAU,QACvBN,EAAKO,QACN,4BAAQC,QAASP,GAAmBC,K,gBCUjC,EAfA,WAEX,OADgBO,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KARV,aAQwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACR,EAAIS,GAEhB,OADgBL,IAAMO,IAAN,UAbJ,aAaI,YAAwBX,GAAMS,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCTvCI,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAe,OAAZA,EACQ,KAIP,yBAAKZ,UAAU,SACVY,IAqGEC,EA/FH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI2BN,mBAAS,MAJpC,mBAIPO,EAJO,KAIQC,EAJR,KAMdC,qBAAU,WACNC,IAEKnB,MAAK,SAAAoB,GACFT,EAASS,QAElB,IAEH,IAAMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAAjC,GAAI,OAAIA,EAAKG,aAkDhC,OACI,6BACA,qCAEA,kBAAC,EAAD,CAAce,QAASS,IAEvB,6BACI,4BAAQnB,QAAS,kBAAMkB,GAAYD,KAAnC,QACMA,EAAU,YAAc,QAGlC,4BAlBeO,EAAYE,KAAI,SAAAlC,GAAI,OACnC,kBAAC,EAAD,CACII,IAAKJ,EAAKK,GACVL,KAAMA,EACNC,iBAAkB,kBAxBC,SAAAI,GACvB,IAAML,EAAOqB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE/B,KAAOA,KAChCgC,EAAW,eAAQrC,EAAR,CAAcG,WAAYH,EAAKG,YAEhD2B,EACYzB,EAAIgC,GACX1B,MAAK,SAAA2B,GACFhB,EAASD,EAAMa,KAAI,SAAAlC,GAAI,OAAIA,EAAKK,KAAOA,EAAKL,EAAOsC,SAEtDC,OAAM,SAAAC,GACHZ,EAAgB,SAAD,OACF5B,EAAKO,QADH,sCAGfkC,YAAW,WACPb,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE/B,KAAOA,SAQhBqC,CAAmB1C,EAAKK,WAiBpD,0BAAMsC,SAzDM,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfvC,QAASgB,EACTwB,MAAM,IAAIC,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAW,GAC3B9C,GAAIgB,EAAM+B,OAAQ,GAEtBtB,EACYgB,GACPnC,MAAK,SAAA2B,GACFhB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,SA8Cf,2BACI8B,MAAO/B,EACPgC,SAjEa,SAACX,GACtBY,QAAQC,IAAIb,EAAMc,OAAOJ,OACzB9B,EAAWoB,EAAMc,OAAOJ,QAgEhBK,YAAY,sBAEhB,4BAAQC,KAAK,UAAb,W,YCnGZC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f7359f66.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {    \r\nconst label = note.important\r\n    ? 'make not important' : 'make important'\r\n    return (        \r\n        <li key={note.id} className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>    \r\n                \r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","//App.js\r\nimport React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\n\r\n\r\nconst Notification = ({ message }) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst App = () => {   \r\n    const [notes, setNotes] = useState([]) \r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage , setErrorMessage] = useState(null)\r\n\r\n    useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n    }, [])\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important)  \r\n \r\n    const handleNoteChange = (event) => {\r\n        console.log(event.target.value)    \r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n            id: notes.length +1,\r\n        }\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('') \r\n            })               \r\n    }\r\n\r\n    const toggleImportanceOf = id => {        \r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important}\r\n\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(\r\n                    `Note '${note.content}' was already deleted from server`\r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n    \r\n    const rows = () => notesToShow.map(note => \r\n        <Note \r\n            key={note.id} \r\n            note={note} \r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n        />)\r\n\r\n    return (      \r\n        <div>\r\n        <h1>Notes</h1>\r\n\r\n        <Notification message={errorMessage} />\r\n\r\n        <div>\r\n            <button onClick={() => setShowAll(!showAll)}>\r\n            show {showAll ? 'important' : 'all'}\r\n            </button>\r\n        </div>\r\n        <ul>\r\n            {rows()}\r\n        </ul>\r\n        <form onSubmit={addNote} >\r\n            <input \r\n                value={newNote} \r\n                onChange={handleNoteChange} \r\n                placeholder='Add a new note...' \r\n            />\r\n            <button type=\"submit\">Save</button>\r\n        </form>\r\n\r\n        {/* <Footer /> */}\r\n\r\n        </div>      \r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from  'react-dom'\nimport App from './App'\nimport './App.css'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}